[{"C:\\Users\\Дмитро\\Desktop\\prog\\cript-change\\src\\index.tsx":"1","C:\\Users\\Дмитро\\Desktop\\prog\\cript-change\\src\\App.tsx":"2","C:\\Users\\Дмитро\\Desktop\\prog\\cript-change\\src\\components\\CryptoTable\\index.tsx":"3","C:\\Users\\Дмитро\\Desktop\\prog\\cript-change\\src\\components\\ConvertBlock\\index.tsx":"4","C:\\Users\\Дмитро\\Desktop\\prog\\cript-change\\src\\styles.ts":"5","C:\\Users\\Дмитро\\Desktop\\prog\\cript-change\\src\\redux\\store.ts":"6","C:\\Users\\Дмитро\\Desktop\\prog\\cript-change\\src\\redux\\reducers\\index.ts":"7","C:\\Users\\Дмитро\\Desktop\\prog\\cript-change\\src\\redux\\reducers\\cryptoReducer.ts":"8","C:\\Users\\Дмитро\\Desktop\\prog\\cript-change\\src\\redux\\action\\crypto.ts":"9","C:\\Users\\Дмитро\\Desktop\\prog\\cript-change\\src\\components\\index.ts":"10","C:\\Users\\Дмитро\\Desktop\\prog\\cript-change\\src\\components\\MainBlock\\index.tsx":"11"},{"size":315,"mtime":1620927406024,"results":"12","hashOfConfig":"13"},{"size":781,"mtime":1621671927575,"results":"14","hashOfConfig":"13"},{"size":2801,"mtime":1621671645448,"results":"15","hashOfConfig":"13"},{"size":5445,"mtime":1621680165525,"results":"16","hashOfConfig":"13"},{"size":1583,"mtime":1621672817609,"results":"17","hashOfConfig":"13"},{"size":478,"mtime":1620929881147,"results":"18","hashOfConfig":"13"},{"size":49,"mtime":1620912104803,"results":"19","hashOfConfig":"13"},{"size":1424,"mtime":1621677128781,"results":"20","hashOfConfig":"13"},{"size":1388,"mtime":1621603506136,"results":"21","hashOfConfig":"13"},{"size":167,"mtime":1621019607012,"results":"22","hashOfConfig":"13"},{"size":1291,"mtime":1621675877319,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1rbrxrl",{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"26"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"26"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51"},"C:\\Users\\Дмитро\\Desktop\\prog\\cript-change\\src\\index.tsx",[],["52","53"],"C:\\Users\\Дмитро\\Desktop\\prog\\cript-change\\src\\App.tsx",["54"],"import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Dispatch } from 'redux';\n\nimport Container from '@material-ui/core/Container';\n\nimport { fetchCryptoAsync, getOldPrices } from './redux/action/crypto';\nimport { MainBlock } from './components';\n\nimport { useStyles } from './styles';\n\nfunction App() {\n  const classes = useStyles();\n  const dispatch: Dispatch<any> = useDispatch();\n\n  React.useEffect(() => {\n    dispatch(fetchCryptoAsync());\n    let getItems = setInterval(() => {\n      dispatch(getOldPrices());\n      dispatch(fetchCryptoAsync());\n    }, 30000);\n    return () => clearInterval(getItems);\n  }, []);\n\n  return (\n    <Container className={classes.root}>\n      <MainBlock classes={classes} />\n    </Container>\n  );\n}\n\nexport default App;\n","C:\\Users\\Дмитро\\Desktop\\prog\\cript-change\\src\\components\\CryptoTable\\index.tsx",["55","56"],"import React from 'react';\r\n\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport { TCoin } from '../../types';\r\n\r\ntype ICryptoTable = {\r\n  coins: TCoin[];\r\n  classes: any;\r\n  loading: boolean;\r\n  diff: number[];\r\n  setPrice: (coin: TCoin) => void;\r\n};\r\n\r\nconst CryptoTable: React.FC<ICryptoTable> = ({ coins, loading, classes, setPrice, diff }) => {\r\n  const onClickPrice = (coin: TCoin) => {\r\n    setPrice(coin);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Paper elevation={3} className={classes.paper}>\r\n        <TableContainer>\r\n          <Table aria-label=\"simple table\">\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell align=\"left\"></TableCell>\r\n                <TableCell align=\"left\">Name</TableCell>\r\n                <TableCell align=\"left\">FullName</TableCell>\r\n                <TableCell align=\"left\">Price</TableCell>\r\n                <TableCell align=\"left\">Volume 24h</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {!loading ? (\r\n                coins.map((coin, id) => (\r\n                  <TableRow\r\n                    key={`${coin.name}` + `${id}`}\r\n                    className={classes.tableRow}\r\n                    onClick={() => onClickPrice(coin)}>\r\n                    <TableCell component=\"th\" scope=\"coin\">\r\n                      <Avatar src={coin.imageUrl} alt=\"Coin icon\" />\r\n                    </TableCell>\r\n                    <TableCell align=\"left\">{coin.name}</TableCell>\r\n                    <TableCell align=\"left\">{coin.fullName}</TableCell>\r\n                    <TableCell\r\n                      className={`${\r\n                        diff[id] > 0 ? classes.priceUp : diff[id] < 0 ? classes.priceDown : ''\r\n                      }`}\r\n                      align=\"left\">\r\n                      ${coin.price}\r\n                    </TableCell>\r\n                    <TableCell align=\"left\">${coin.volume24hour}</TableCell>\r\n                  </TableRow>\r\n                ))\r\n              ) : (\r\n                <TableRow>\r\n                  <TableCell component=\"th\" scope=\"coin\">\r\n                    Загрузка коинов\r\n                  </TableCell>\r\n                </TableRow>\r\n              )}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n      </Paper>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CryptoTable;\r\n","C:\\Users\\Дмитро\\Desktop\\prog\\cript-change\\src\\components\\ConvertBlock\\index.tsx",["57"],"import React from 'react';\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nimport { TCoin } from '../../types';\r\n\r\ntype IConvertBlock = {\r\n  classes: any;\r\n  coins: TCoin[];\r\n  userCoin: TCoin;\r\n  loading?: boolean;\r\n};\r\n\r\nconst ConvertBlock: React.FC<IConvertBlock> = ({ classes, coins, userCoin, loading }) => {\r\n  const [firstAmountCoin, setFirstAmountCoin] = React.useState<number | string>(\r\n    coins[0] !== undefined ? coins[0].price : '',\r\n  );\r\n  const [firstCoinName, setFirstCoinName] = React.useState<string>(\r\n    coins[0] !== undefined ? coins[0].name : '',\r\n  );\r\n  const [secondAmountCoin, setSecondAmountCoin] = React.useState<number | string>(\r\n    coins[1] !== undefined ? coins[1].price : '',\r\n  );\r\n  const [secondCoinName, setSecondCoinName] = React.useState<string>(\r\n    coins[1] !== undefined ? coins[1].name : '',\r\n  );\r\n\r\n  const nodeRef = React.useRef<HTMLDivElement>(null);\r\n  let coinPrice = (name: string) => coins.find((coin) => coin.name === name)?.price!;\r\n\r\n  React.useEffect(() => {\r\n    setFirstAmountCoin(userCoin.price);\r\n    setFirstCoinName(userCoin.name);\r\n    newSecAmount(userCoin.price, 1, coinPrice(secondCoinName));\r\n\r\n    if (userCoin.name === secondCoinName) {\r\n      setSecondCoinName('');\r\n      setSecondAmountCoin(0);\r\n    }\r\n  }, [userCoin]);\r\n\r\n  //react synthetic target event\r\n  const onFirstCoinNameChange = (e: any): void => {\r\n    if (nodeRef && nodeRef.current) {\r\n      nodeRef.current.focus();\r\n    }\r\n    setFirstCoinName(e.target.value);\r\n    setFirstAmountCoin(coinPrice(e.target.value));\r\n    newSecAmount(1, coinPrice(e.target.value), coinPrice(secondCoinName));\r\n    if (e.target.value === secondCoinName) {\r\n      setSecondCoinName('');\r\n      setSecondAmountCoin(0);\r\n    }\r\n  };\r\n\r\n  const onFirstAmountCoinChange = (val: number): void => {\r\n    console.log(val);\r\n    setFirstAmountCoin(val);\r\n    newSecAmount(val, coinPrice(firstCoinName), coinPrice(secondCoinName));\r\n  };\r\n\r\n  const onSecondCoinNameChange = (e: any): void => {\r\n    setSecondCoinName(e.target.value);\r\n    newSecAmount(firstAmountCoin, coinPrice(firstCoinName), coinPrice(e.target.value));\r\n    if (e.target.value === firstCoinName) {\r\n      setFirstCoinName('');\r\n      setFirstAmountCoin(0);\r\n    }\r\n  };\r\n\r\n  const onSecondAmountCoinChange = (val: number): void => {\r\n    setSecondAmountCoin(val);\r\n    newFirstAmount(val, coinPrice(firstCoinName), coinPrice(secondCoinName));\r\n  };\r\n\r\n  ////////////////////////////////////////////CONVERTING//////////////////\r\n  const newFirstAmount = (secVal: number | string, firstPrice: number, secPrice: number) => {\r\n    let newAmount: number = (Number(secVal) * Number(secPrice)) / Number(firstPrice);\r\n    //console.log(firstAmountCoin, firstPrice, secPrice, val, newPrice);\r\n    setFirstAmountCoin(newAmount);\r\n  };\r\n\r\n  const newSecAmount = (val: number | string, firstPrice: number, secPrice: number) => {\r\n    let newAmount: number = (Number(val) * Number(firstPrice)) / Number(secPrice);\r\n    console.log(firstAmountCoin, firstPrice, secPrice, val, newAmount);\r\n    setSecondAmountCoin(newAmount);\r\n  };\r\n\r\n  //console.log(userCoin.price, firstAmountCoin);\r\n  //console.log(userCoin.price, secondAmountCoin);\r\n  return (\r\n    <>\r\n      <Paper elevation={3} className={classes.paper}>\r\n        <div className={classes.inputWrapper}>\r\n          <FormControl>\r\n            <TextField\r\n              label=\"Сумма\"\r\n              variant=\"outlined\"\r\n              value={firstAmountCoin || ''}\r\n              onChange={(e) => onFirstAmountCoinChange(Number(e.target.value))}\r\n            />\r\n          </FormControl>\r\n          <FormControl variant=\"outlined\" style={{ minWidth: 100 }}>\r\n            <InputLabel id=\"demo-simple-select-outlined-label\">Валюта</InputLabel>\r\n            <Select\r\n              label=\"Валюта\"\r\n              value={firstCoinName || ''}\r\n              ref={nodeRef}\r\n              onChange={(e) => onFirstCoinNameChange(e)}>\r\n              {coins.map((coin, id) => (\r\n                <MenuItem key={id} value={coin.name}>\r\n                  {coin.name}\r\n                </MenuItem>\r\n              ))}\r\n            </Select>\r\n          </FormControl>\r\n        </div>\r\n\r\n        <div className={classes.inputWrapper}>\r\n          <FormControl>\r\n            <TextField\r\n              variant=\"outlined\"\r\n              label=\"Сумма\"\r\n              value={secondAmountCoin || ''}\r\n              onChange={(e) => onSecondAmountCoinChange(Number(e.target.value))}\r\n            />\r\n          </FormControl>\r\n          <FormControl variant=\"outlined\" style={{ minWidth: 100 }}>\r\n            <InputLabel>Валюта</InputLabel>\r\n            <Select\r\n              label=\"Валюта\"\r\n              variant=\"outlined\"\r\n              value={secondCoinName || ''}\r\n              onChange={(e) => onSecondCoinNameChange(e)}>\r\n              {coins.map((coin, id) => (\r\n                <MenuItem key={id} value={coin.name}>\r\n                  {coin.name}\r\n                </MenuItem>\r\n              ))}\r\n            </Select>\r\n          </FormControl>\r\n        </div>\r\n      </Paper>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default React.memo(ConvertBlock);\r\n","C:\\Users\\Дмитро\\Desktop\\prog\\cript-change\\src\\styles.ts",[],"C:\\Users\\Дмитро\\Desktop\\prog\\cript-change\\src\\redux\\store.ts",[],"C:\\Users\\Дмитро\\Desktop\\prog\\cript-change\\src\\redux\\reducers\\index.ts",[],"C:\\Users\\Дмитро\\Desktop\\prog\\cript-change\\src\\redux\\reducers\\cryptoReducer.ts",["58"],"import {  CryptoAction, CryptoState } from \"../../types\";\r\n\r\n\r\nconst initialState: CryptoState = {\r\n    allCoins: [],\r\n    allCoinsOldPrice: [],\r\n    diff: [],\r\n    loading: true,\r\n}\r\n\r\nconst crypto = (state:CryptoState = initialState, action: CryptoAction):CryptoState => {\r\n    switch (action.type) {\r\n        case \"FETCH_CRYPTO\":\r\n            return {\r\n                ...state,\r\n                allCoins: action.payload === undefined ? [] : [...action.payload],\r\n                loading: false\r\n            };\r\n        case \"GET_OLD_PRICE\":\r\n            return {\r\n                ...state,\r\n                allCoinsOldPrice: [...state.allCoins.map((i)=>i.price)],\r\n            };\r\n        case \"COMPARE_PRICES\":\r\n            let newObj = {\r\n                    ...state,\r\n                    diff: state.allCoinsOldPrice[0] !== action.payload[0] \r\n                    ? [...state.allCoinsOldPrice.map((price, i)=>{return <any>action.payload[i]-price})] \r\n                    : [...state.diff],\r\n                }\r\n            \r\n            return newObj;  \r\n        case \"SET_LOADING\":\r\n            let load = false\r\n            if (!state.diff.includes(0)){\r\n                load = true;\r\n            }\r\n            console.log(load)\r\n            return {\r\n                ...state,\r\n                loading: load\r\n            };\r\n        \r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default crypto;","C:\\Users\\Дмитро\\Desktop\\prog\\cript-change\\src\\redux\\action\\crypto.ts",[],"C:\\Users\\Дмитро\\Desktop\\prog\\cript-change\\src\\components\\index.ts",[],"C:\\Users\\Дмитро\\Desktop\\prog\\cript-change\\src\\components\\MainBlock\\index.tsx",["59"],"import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport { CryptoState, TCoin } from '../../types';\r\n\r\nimport { ConvertBlock, CryptoTable } from '../index';\r\n\r\ntype MainBlockType = {\r\n  classes: any;\r\n};\r\n\r\nconst MainBlock: React.FC<MainBlockType> = ({ classes }) => {\r\n  const { allCoins, loading, diff } = useSelector((state: CryptoState) => state);\r\n\r\n  const [userCoin, setUserCoin] = React.useState<TCoin>({ ...allCoins[0] });\r\n\r\n  React.useEffect(() => {\r\n    setUserCoin({ ...userCoin, ...allCoins[0] });\r\n  }, []);\r\n\r\n  const setPrice = (coin: TCoin): void => {\r\n    if (coin !== undefined) {\r\n      setUserCoin(coin);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Grid className={classes.gridWrapper} container spacing={3}>\r\n        <Grid item xs={10} sm={10} md={10} lg={4}>\r\n          <ConvertBlock classes={classes} coins={allCoins} loading={loading} userCoin={userCoin} />\r\n        </Grid>\r\n        <Grid item xs={10} sm={10} md={10} lg={8}>\r\n          <CryptoTable\r\n            classes={classes}\r\n            coins={allCoins}\r\n            loading={loading}\r\n            setPrice={setPrice}\r\n            diff={diff}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MainBlock;\r\n",{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","severity":1,"message":"65","line":23,"column":6,"nodeType":"66","endLine":23,"endColumn":8,"suggestions":"67"},{"ruleId":"68","severity":1,"message":"69","line":11,"column":8,"nodeType":"70","messageId":"71","endLine":11,"endColumn":18},{"ruleId":"72","severity":1,"message":"73","line":46,"column":41,"nodeType":"74","messageId":"75","endLine":46,"endColumn":42},{"ruleId":"64","severity":1,"message":"76","line":45,"column":6,"nodeType":"66","endLine":45,"endColumn":16,"suggestions":"77"},{"ruleId":"78","severity":1,"message":"79","line":28,"column":74,"nodeType":"80","messageId":"81","endLine":28,"endColumn":96},{"ruleId":"64","severity":1,"message":"82","line":21,"column":6,"nodeType":"66","endLine":21,"endColumn":8,"suggestions":"83"},"no-native-reassign",["84"],"no-negated-in-lhs",["85"],"react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["86"],"@typescript-eslint/no-unused-vars","'Typography' is defined but never used.","Identifier","unusedVar","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","React Hook React.useEffect has missing dependencies: 'coinPrice', 'newSecAmount', and 'secondCoinName'. Either include them or remove the dependency array.",["87"],"@typescript-eslint/consistent-type-assertions","Use 'as any' instead of '<any>'.","TSTypeAssertion","as","React Hook React.useEffect has missing dependencies: 'allCoins' and 'userCoin'. Either include them or remove the dependency array. You can also do a functional update 'setUserCoin(u => ...)' if you only need 'userCoin' in the 'setUserCoin' call.",["88"],"no-global-assign","no-unsafe-negation",{"desc":"89","fix":"90"},{"desc":"91","fix":"92"},{"desc":"93","fix":"94"},"Update the dependencies array to be: [dispatch]",{"range":"95","text":"96"},"Update the dependencies array to be: [coinPrice, newSecAmount, secondCoinName, userCoin]",{"range":"97","text":"98"},"Update the dependencies array to be: [allCoins, userCoin]",{"range":"99","text":"100"},[640,642],"[dispatch]",[1555,1565],"[coinPrice, newSecAmount, secondCoinName, userCoin]",[588,590],"[allCoins, userCoin]"]